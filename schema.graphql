type Profile @entity {
  id: ID!
  user: Bytes!
  username: String!
  description: String!
  profilepic: String!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type ProfileCreated @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  username: String!
  description: String!
  profilepic: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RankingtoSubmission @entity(immutable: true) {
  id: Bytes!
  communityId: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Community @entity {
  id: ID!
  communityId: BigInt!
  name: String!
  description: String!
  imageUrl: String!
  games: [String!]!
  currentGame: String!
  state: BigInt!
  createdAt: BigInt!
  createdAtBlock: BigInt!
  transactionHash: Bytes!
  latestConsensus: String
  submittedRankingsCount: Int
  weeklyGames: [WeeklyGroupsCreated!]! @derivedFrom(field: "community")
  memberAddresses: [Bytes!]!
  proposals: [Proposal!]! @derivedFrom(field: "community")
  tokenAddress: Bytes!
  pendingMembers: [PendingMember!]! @derivedFrom(field: "community") # Add this line
}

type CommunityJoined @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  communityId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CommunityCreated @entity(immutable: true) {
  id: String!
  communityId: BigInt!
  name: String!
  description: String!
  imageUrl: String!
  games: String!
  tokenAddress: Bytes! # Add this line
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CommunityStateChanged @entity(immutable: true) {
  id: String!
  communityId: BigInt!
  newState: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}


type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes!
  newOwner: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SubmissionToContributionTransition @entity(immutable: true) {
  id: String!
  idWeek: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ContributionSubmitted @entity {
  id: String!
  contributionId: String!
  game: WeeklyGroupsCreated!
  contributions: [Contribution!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Contribution @entity {
  id: ID!
  name: String!
  description: String!
  links: [String!]!
}

type NewGroupsCreated @entity {
  id: String!
  eventId: String!
  game: WeeklyGroupsCreated!
  contributionStrings: [String!]!
  rankingStrings: [String!]!
  memberAddresses: [String!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RespectUpdated @entity(immutable: true) {
  id: String!
  user: Bytes!
  communityId: BigInt!
  weekNumber: BigInt!
  respectAmount: BigInt!
  averageRespect: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WeeklyGroupsCreated @entity {
  id: String!
  communityAndWeekId: String!
  community: Community!
  roomIds: [String!]!
  roomIdentifiers: [String!]!
  weekNumber: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  rooms: [NewGroupsCreated!]! @derivedFrom(field: "game")
  contributions: [ContributionSubmitted!]! @derivedFrom(field: "game")
  rankings: [RankingSubmitted!]! @derivedFrom(field: "game")
}

type ConsensusReached @entity(immutable: true) {
  id: String!
  compositeId: String!
  finalRanking: [String!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RankingSubmitted @entity {
  id: String!
  eventId: String!
  game: WeeklyGroupsCreated!
  ranking: [String!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type Proposal @entity {
  id: ID!
  communityId: BigInt!
  proposalId: BigInt!
  proposalType: BigInt!
  creator: Bytes!
  amount: BigInt!
  approvers: [Bytes!]!
  approvalCount: Int!
  community: Community!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type ProposalCreated @entity(immutable: true) {
  id: Bytes!
  communityId: BigInt!
  proposalId: BigInt!
  proposalType: BigInt!
  creator: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalSigned @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt!
  signer: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PendingMember @entity {
  id: ID!
  user: Bytes!
  communityId: BigInt!
  community: Community! # Add this line
  approvers: [Bytes!]
  approvalCount: BigInt!
  status: String!
}

type CommunityJoinApplication @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  communityId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserApproval @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  communityId: BigInt!
  approver: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}